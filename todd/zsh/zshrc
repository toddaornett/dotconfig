########## # character encoding ##########
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_TIME=ja_JP
export OPENPROJECTS_PATH=${OPENPROJECTS_PATH:-$HOME/Projects}

##########
# append specified path both to users .zprofile without any variables
# and append to path of current session with any variables interpolated
##########
append_path() {
  local new_path="$1"

  # Ensure the exact string with the variable reference is written to ~/.zprofile
  if ! grep -Fxq "path+=($new_path)" "$HOME/.config/zsh/.zprofile"; then
    echo "path+=($new_path)" >> "$HOME/.config/zsh/.zprofile"
  fi

  # Expand variables and append to the current session’s path
  local expanded_path
  eval "expanded_path=$new_path"
  if [[ -d "$expanded_path" && ":$path:" != *":$expanded_path:"* ]]; then
    path+=("$expanded_path")
  fi
}

##########
# emacs source path
##########
append_path '$OPENPROJECTS_PATH/emacs/src'
append_path '$OPENPROJECTS_PATH/emacs/lib-src'

##########
# load all aliases sources
##########
for f in $HOME/.config/todd/zsh/aliases*; do
  source $f
done

##########
# zsf custom functions path
##########
fpath+=$HOME/.config/zsh

##########
# autocomplete and history
##########
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
fi
autoload -Uz compinit && compinit
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if [ $(date +'%j') != $updated_at ]; then
  compinit -i
else
  compinit -C -i
fi
zmodload -i zsh/complist
setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match
zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

export HISTFILE=$HOME/.zsh_history
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt inc_append_history # save history entries as soon as they are entered
setopt share_history # share history between different instances of the shell

export HOMEBREW=$(brew --prefix)

setopt auto_cd
eval "$(zoxide init zsh)"
if [ ! -d $HOMEBREW/opt/fzf ]
then
  brew install fzf
  # To install useful key bindings and fuzzy completion:
  $HOMEBREW/opt/fzf/install
fi
if [[ ! "$PATH" == */homebrew/opt/fzf/bin* ]]; then
  append_path '$HOMEBREW/opt/fzf/bin'
fi

# Auto-completion
[[ $- == *i* ]] && source "$)/opt/fzf/shell/completion.zsh" 2>/dev/null

# Key bindings
# ------------
source "$HOMEBREW/opt/fzf/shell/key-bindings.zsh"

export _ZO_EXCLUDE_DIRS="$HOME/private/*"

##########
# node version manager
##########
if [ ! -d $HOME/.nvm ]
then
  mkdir $HOME/.nvm
fi
if ! command -v nvm &> /dev/null; then
  brew install nvm
fi
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"                                       # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
autoload -U add-zsh-hook
load-nvmrc() {
  if [[ -f .nvmrc && -r .nvmrc ]]; then
    local nvmrc_node_version
    nvmrc_node_version=$(<.nvmrc)
    local current_node_version
    current_node_version=$(nvm version)

    if [[ $nvmrc_node_version != "$current_node_version" ]]; then
      nvm install "$nvmrc_node_version"
    fi
  fi
}
add-zsh-hook chpwd load-nvmrc

##########
# preset folders
##########
unset cdirmap
declare -A cdirmap
devBase=~/Projects
cdirmap[P]="$devBase"
cdirmap[vim]="$HOME/.config/nvim"

# display the folder shortcut mappings
function ds {
  (for key value in ${(@kv)cdirmap}; do printf "%-10s %s\n" $key $value; done) | sort
}

# change to specified folder by key
# e.g. to change to the ~/Projects directory, type "d P"
function d {
  key="$1"
  if [ -n "$key" ] && 
  then
    e=${key:0:1}
    echo $e
    v="${cdirmap[${key}]}" 
    if [ -n "$v" ];
    then
      cd "$v"
    else
      cd "$dirBase"
    fi
  else
    cd "$dirBase"
  fi
  unset key
}

source $HOMEBREW/opt/spaceship/spaceship.zsh

##########
# misc
##########
alias G='grep -i'
alias Z='source ~/.config/zsh/.zshrc'
alias lc='print -l ${(ok)functions}|G -v "^_"'
alias env='/usr/bin/env | grep -iv pass | grep -v DATABASE_URL | grep -v FLYWAY_URL'

###########
# Copy/Paste aliases
###########
alias p='pbcopy '
alias P='pbpaste '

##########
# change finder setting for showing of hidden files
##########
function hide {
  defaults write com.apple.Finder AppleShowAllFiles false
}

function show {
  defaults write com.apple.Finder AppleShowAllFiles true
}

###########
# simulate locate command, thereby using the same Spotlight search DB
###########
function locate {
  mdfind "kMDItemDisplayName == '$@'wc";
}

###########
# remove (aka nuke) various things
###########
function nuke-config-nvim {
  rm -rf ~/.config/nvim
  rm -rf ~/.local/share/nvim
}

###########
# building from varous sources
###########
function make-my-nvim {
  if [ ! -d ~/Projects/neovim/ ]
  then
    if [ ! -d ~/Projects ]
    then
      mkdir ~/Projects
    fi
    cd Projects
    git clone https://github.com/neovim/neovim.git
  fi
  if [[ "$#" -gt 0 ]] || [[ ! $(git pull | grep "Already up to date." &>/dev/null) ]]
  then
    cd ~/Projects/neovim
    make CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$HOME/Neovim install
  fi
}

###########
# swagger editor
###########
function swage {
  if ! docker images | grep swaggerapi/swagger-editor 2>/dev/null
  then
    docker pull swaggerapi/swagger-editor
  fi
  docker run -p 80:8080 swaggerapi/swagger-editor
}

###########
# Neovim configuration switcher
###########
alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"

function nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "AstroNvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

eval "$(direnv hook zsh)"

###########
# turn display off in 5 seconds
###########
function doff {
  sleep 5
  pmset displaysleepnow
}

###########
# stay awake
###########
function nodoze {
  local w=$(($1 * 3600))
  echo "Stay active for $1 hours ($w seconds)"
  caffeinate -d -i -m -s -u -t $w
}

###########
# rbenv
###########
eval "$(rbenv init - zsh)"

##########
# start tmux
##########
function start_tmux {
  if command -v tmux &>/dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]
  then
    exec tmux new -As0 && exit
  fi
}

##########
# list Rust project paths
##########
function lsrp {
  base_dir=~/Projects
  for dir in "$base_dir"/*/; do
    if [[ -f "$dir/Cargo.toml" ]]; then
      echo "$dir"
    fi
  done
}

##########
# add hook for loading project companion env variables
##########
autoload -U add-zsh-hook

function load_companion_env {
  local currentdir=$(pwd)
  local parentdir="$(dirname "$currentdir")"
  if [[ $parentdir == *Projects ]]
  then
    local project="$(basename "$currentdir")"
    local myenv=${MYENV:-local}
    local envars="$HOME/myenv/$project/${myenv}.zsh"
    [ -e $envars ] && source $envars
  fi
}

add-zsh-hook chpwd load_companion_env
